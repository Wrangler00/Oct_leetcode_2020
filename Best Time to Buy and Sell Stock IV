You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Notice that you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
 

Constraints:

0 <= k <= 109
0 <= prices.length <= 104
0 <= prices[i] <= 1000



//cpp DP solution ,implemented using youtube and discuss tutorials 
//very slow solution! Time->1556 ms, Space->264.4 MB
//inefficient solution

class Solution {
public:
    int maxProfit(int k, vector<int>& p) {
        int sz = p.size();
        
        if(sz<2)    return 0;
        if(k>sz/2)    k=sz/2;
        
        vector<vector<int>> dp(k+1,vector<int>(sz,0));
        
        for(int i=1;i<=k;i++){
            int minn = p[0];
            for(int j=1;j<sz;j++){    
                minn = min(minn, p[j] - dp[i-1][j-1]);
                dp[i][j] = max(dp[i][j-1], p[j] - minn);
            }
        }
        
        return dp[k][sz-1];
    }
};


//cpp fast and efficient solution
//reason: check comments on below code

class Solution {
public:
    int maxProfit(int k, vector<int>& p) {
        int sz = p.size();
        
        if(sz<2)    return 0;
        
        //when k is greater then half of days
        // that means we have infinite no of transactions for given days
        //and the problem comes back to max profit with no limit on transactions
        if(k>sz/2)
        {
            int ans=0;
            for(int i=1;i<sz;++i)
            {
                ans+=max(0,p[i]-p[i-1]);
            }
            
            return ans;
        }
        
        vector<vector<int>> dp(k+1,vector<int>(sz,0));
        
        for(int i=1;i<=k;i++){
            int minn = p[0];
            for(int j=1;j<sz;j++){    
                minn = min(minn, p[j] - dp[i-1][j-1]);
                dp[i][j] = max(dp[i][j-1], p[j] - minn);
            }
        }
        
        return dp[k][sz-1];
    }
};
