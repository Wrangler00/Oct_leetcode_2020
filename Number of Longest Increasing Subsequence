Given an integer array nums, return the number of longest increasing subsequences.

 

Example 1:

Input: nums = [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].
Example 2:

Input: nums = [2,2,2,2,2]
Output: 5
Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.

 

Constraints:

0 <= nums.length <= 2000
-106 <= nums[i] <= 106

//cpp my solution using DP top down approach

class Solution {
public:
    int findNumberOfLIS(vector<int>& nm) {
        int sz=nm.size();
        
        vector<int> mp(sz+1,0);
        vector<pair<int,int>> dp(sz+1,pair<int,int>({1,1}));
        
        for(int i=sz-1;i>=0;i--,mp[1]++){
            for(int j=i+1;j<sz;j++){
                if(nm[i]>=nm[j])    continue;
                if(dp[i].first>sz-j+1)    break;
                
                
                if(dp[i].first<dp[j].first+1){
                    dp[i] = make_pair(dp[j].first+1,dp[j].second);
                    mp[dp[j].first+1]+=dp[j].second;
                }else if(dp[i].first==dp[j].first+1){
                    dp[i].second+=dp[j].second;
                    mp[dp[i].first]+=dp[j].second;
                }
            }
        }
        
        for(int i=sz;i>=0;i--) if(mp[i])    return mp[i];
        
        return 0;
    }
};
