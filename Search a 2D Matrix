Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 13
Output: false
Example 3:

Input: matrix = [], target = 0
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
0 <= m, n <= 100
-104 <= matrix[i][j], target <= 104

//cpp my solution

class Solution {
public:
    bool bin_horizontal(vector<vector<int>>& m,int l,int r,int t,int ind){
        int mid;
        
        while(l<=r){
            mid = (l+r)/2;
            
            if(m[ind][mid] == t)
                return true;
            
            if(m[ind][mid]<t)
                l=mid+1;
            else
                r=mid-1;
        }
        
        return false;
    }
    int bin_vertical(vector<vector<int>>& m,int l,int r,int t){
        int find=-1,mid;
        
        while(l<=r){
            mid = (l+r)/2;
            
            if(m[mid][0] == t)
                return -2;
            
            if(m[mid][0]<t){
                find = mid;
                l=mid+1;
            }else{
                r=mid-1;
            }
        }
        
        return find;
    }
    
    bool searchMatrix(vector<vector<int>>& m, int t) {
        int sz= m.size();
        if(!sz || !m[0].size())
            return false;
        
        int find = bin_vertical(m,0,sz-1,t);
        
        return find ==-1?false:(find == -2 || bin_horizontal(m,0,m[0].size()-1,t,find));
    }
};

//cpp others more optimized solutions

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.size() == 0) return false;
        int row = matrix.size() -1, col = 0;
        while(row >= 0 && col < matrix[0].size()){
            int val = matrix[row][col];
            if( val == target){
                return true;
            }else if(val > target){
                row--;
            }else{
                col++;
            }
        }
        return false;
    }
};

//solution 2 optimized

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        if(m == 0) return false;
        int n = matrix[0].size();
        if(n == 0) return false;
        
        int l = 0, r = m*n - 1, mid;
        while(l < r) {
            mid = l + (r - l)/2;
            if(matrix[mid/n][mid%n] == target) return true;
            if(matrix[mid/n][mid%n] > target) r = mid - 1;
            else l = mid + 1;
        }
        
        if(matrix[l/n][l%n] == target) return true;
        else return false;
    }
};
