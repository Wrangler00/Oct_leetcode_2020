Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.

Note: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/

 

Example 1:

Input: s = "bcabc"
Output: "abc"
Example 2:

Input: s = "cbacdcbc"
Output: "acdb"
 

Constraints:

1 <= s.length <= 104
s consists of lowercase English letters.

//cpp NOT my solution

//learned fron the discuss and then implemented

class Solution {
public:
    string removeDuplicateLetters(string s) {
        int arr[26] = {0},vis[10001]={0};
        
        string ans="";
        
        for(char &ch:s)
            ++arr[ch-'a'];
        
        for(char &ch:s){
            int ind = ch-'a';
            
            --arr[ind];
            
            if(vis[ind])    continue;
            
            while(ans.length()!=0 && ans.back()>ch && arr[ans.back()-'a']!=0){
                vis[ans.back()-'a'] = 0;
                ans.pop_back();
            }
            
            vis[ind] = 1;
            ans+=string(1,ch);
        }
        
        return ans;
    }
};
