You have a RecentCounter class which counts the number of recent requests within a certain time frame.

Implement the RecentCounter class:

RecentCounter() Initializes the counter with zero recent requests.
int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t].
It is guaranteed that every call to ping uses a strictly larger value of t than the previous call.

 

Example 1:

Input
["RecentCounter", "ping", "ping", "ping", "ping"]
[[], [1], [100], [3001], [3002]]
Output
[null, 1, 2, 3, 3]

Explanation
RecentCounter recentCounter = new RecentCounter();
recentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1
recentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2
recentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3
recentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3
 

Constraints:

1 <= t <= 104
Each test case will call ping with strictly increasing values of t.
At most 104 calls will be made to ping.


//my first attempt using segment tree
//RESULT: time limit exceeded and buffer overflow

#define left(n) 2*n
#define right(n) 2*n+1
// const int LIM = 1e4+100;

class RecentCounter {
    const int LIM = 1e4+100;
    vector<int> sgtree;
public:
    RecentCounter() {
        this->sgtree.clear();
        this->sgtree = vector<int>(4*LIM,0);
    }
    
    void updateTree(int l,int r,int ind,int node){
        if(ind<l || ind>r)
            return;
        
        if(l==r){
            this->sgtree[node] = 1;    
        }else{
            int mid = (l+r)>>1;
            updateTree(l,mid,ind,left(node));
            updateTree(mid+1,r,ind,right(node));
            
            this->sgtree[node] = this->sgtree[left(node)]+this->sgtree[right(node)];
        }
        return;
    }
    
    int getCount(int l,int r,int start,int end,int node){
        if(start > end || r<start || l>end){
            return 0;
        }
        
        if (start>=l && end<=r){
            return this->sgtree[node]; 
        }
        
        int mid = (start+end)>>1;
        
        return getCount(l,r,start,mid,left(node))+getCount(l,r,mid+1,end,right(node));
    }
    int ping(int t) {
        updateTree(0,4*LIM,t,1);
        
        return getCount(max(0,t-3000),t,0,4*LIM,1);
    }
};

/**
 * Your RecentCounter object will be instantiated and called as such:
 * RecentCounter* obj = new RecentCounter();
 * int param_1 = obj->ping(t);
 */
 
//my second attempt using segment tree
//RESULT: buffer overflow

#define left(n) 2*n
#define right(n) 2*n+1
const long LIM = 1000000000+100;//1e6+100;

class RecentCounter {
    // const int LIM = 1e4+100;
    int sgtree[4*LIM+10] = {0};
public:
    RecentCounter() {
        for(long i=0;i<4*LIM+9;i++)
            sgtree[i] = 0;
    }
    
    void updateTree(int l,int r,int ind,int node){
        if(ind<l || ind>r)
            return;
        
        if(l==r){
            sgtree[node] = 1;    
        }else{
            int mid = (l+r)>>1;
            updateTree(l,mid,ind,left(node));
            updateTree(mid+1,r,ind,right(node));
            
            sgtree[node] = sgtree[left(node)]+sgtree[right(node)];
        }
        return;
    }
    
    int getCount(int l,int r,int start,int end,int node){
        if(start > end || r<start || l>end){
            return 0;
        }
        
        if (start>=l && end<=r){
            return sgtree[node]; 
        }
        
        int mid = (start+end)>>1;
        
        return getCount(l,r,start,mid,left(node))+getCount(l,r,mid+1,end,right(node));
    }
    int ping(int t) {
        updateTree(0,LIM,t,1);
        
        return getCount(max(0,t-3000),t,0,LIM,1);
    }
};

/**
 * Your RecentCounter object will be instantiated and called as such:
 * RecentCounter* obj = new RecentCounter();
 * int param_1 = obj->ping(t);
 */
 
 
 //my 3rd attempt using simple iteration till last 3000 at worst [BUT IT IS QUITE SLOW]
 //O(n*3000)
 //RESULT: accepted
 
 class RecentCounter {
    vector<long> times;
    int size;
public:
    RecentCounter() {
        times.clear();
        size=0;
    }
    
    int ping(int t) {
        times.push_back(t);
        ++size;
        const int back = max(0,t-3000);
        int count =0,i=size-1;
        
        while(i>=0 && times[i]>=back){
            ++count;
            --i;
        }
        
        return count;
    }
};

/**
 * Your RecentCounter object will be instantiated and called as such:
 * RecentCounter* obj = new RecentCounter();
 * int param_1 = obj->ping(t);
 */
 
 //cpp my binary search solution O(nlogn) [FASTEST 98%]
 
 class RecentCounter {
    vector<long> times;
    int size;
public:
    RecentCounter() {
        times.clear();
        size=0;
    }
    
    int ping(int t) {
        times.push_back(t);
        ++size;
        const int back = max(0,t-3000);
        
        int l=0,r=size-1,mid;
        int found=0;
        while(l<=r){
            mid = (l+r)/2;
            
            if(times[mid] == back){
                found=mid;
                break;
            }else if(times[mid]<back){
                l = mid+1;
            }else{
                r=mid-1;
                found=mid;
            }
        }
        
        return size-found;
    }
};
