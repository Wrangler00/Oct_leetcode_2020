Alice and Bob take turns playing a game, with Alice starting first.

Initially, there are n stones in a pile.  On each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile.

Also, if a player cannot make a move, he/she loses the game.

Given a positive integer n. Return True if and only if Alice wins the game otherwise return False, assuming both players play optimally.

 

Example 1:

Input: n = 1
Output: true
Explanation: Alice can remove 1 stone winning the game because Bob doesn't have any moves.
Example 2:

Input: n = 2
Output: false
Explanation: Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0).
Example 3:

Input: n = 4
Output: true
Explanation: n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0).
Example 4:

Input: n = 7
Output: false
Explanation: Alice can't win the game if Bob plays optimally.
If Alice starts removing 4 stones, Bob will remove 1 stone then Alice should remove only 1 stone and finally Bob removes the last one (7 -> 3 -> 2 -> 1 -> 0). 
If Alice starts removing 1 stone, Bob will remove 4 stones then Alice only can remove 1 stone and finally Bob removes the last one (7 -> 6 -> 2 -> 1 -> 0).
Example 5:

Input: n = 17
Output: false
Explanation: Alice can't win the game if Bob plays optimally.
 

Constraints:

1 <= n <= 10^5

//cpp my solution (slow from average solutions)

class Solution {
    vector<bool> issq;
    vector<vector<int>> dp;
    vector<int> sq;
public:
    void makesq(int n){
        for(int i=1;(long)i*i<=n;i++){
            issq[i*i]=1;
            sq.push_back(i*i);
        }
    }
    
    bool getans(int n,bool turn){
        if(dp[turn][n]!=-1)
            return dp[turn][n];
        
        if(n==0){
            dp[turn][n]=0;
            return false;
        }
        
        if(issq[n]){
            dp[turn][n]=1;
            return true;
        }
        
        for(auto &v:sq){
            if(v>n) break;
            if(!getans(n-v,!turn)){
                dp[turn][n]=true;
                return true;
            }
        }
        dp[turn][n]=false;
        return false;
    }
    
    bool winnerSquareGame(int n) {
        if(n==1 || ceil(sqrt(n))==floor(sqrt(n)))    return true;
        
        dp = vector<vector<int>> (2,vector<int>(n+1,-1));
        issq = vector<bool> (n+1,0);
        
        makesq(n);
        getans(n,0);
        
        return dp[0][n];
    }
};

//cpp more optimized solution both in time and space taken help from discuss

class Solution {
    vector<int> dp;
public:
    bool getans(int n,bool turn){
        if(dp[n]!=-1) return dp[n];
        
        if(n==0)    return dp[n]=0;
        
        for(int i=1;i*i<=n;i++)
            if(!getans(n-(i*i),!turn))
                return dp[n]=true;
        
        return dp[n]=false;
    }
    
    bool winnerSquareGame(int n) {
        if(n==1 || ceil(sqrt(n)) == floor(sqrt(n)))    return true;
        dp = vector<int>(n+1,-1);
        
        return getans(n,0);
    }
};
